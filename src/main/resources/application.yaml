# 공통 설정9

server:
  port: 8080

gdp:
  application:
    front-uri: ${GDP_FRONT_URI:"http://localhost:5173"}
    back-uri: ${GDP_BACK_URI:"http://localhost:8080"}
  custom:
    oauth2-auth-uri: ${OAUTH2_AUTH_URI}
    oauth2-redirect-uri: ${OAUTH2_REDIRECT_URI}
  file-server:
    url:
      upload: ${GDP_FILE_SERVER_UPLOAD_URL}
      download: ${GDP_FILE_SERVER_DOWNLOAD_URL}
    dir:
      profile: /profile

auth:
  token:
    location: COOKIE


spring:
  config:
    import: optional:file:.env[.properties]
  web:
    resources:
      add-mappings: false # Disable static resource mapping (For NoHandlerFoundException)

  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://${DB_URL}:${DB_PORT:30306}/${DB_NAME}?passwordCharacterEncoding=UTF-8
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

  jpa:
    database-platform: org.hibernate.dialect.MariaDBDialect
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        format_sql: true # To beautify or pretty print the SQL
        show_sql: true # show sql
    open-in-view: false # 영속성 컨텍스트가 데이터베이스 커넥션을 바로 반납하도록 하는 설정


  security:
    oauth2:
      client:
        registration:
          GOOGLE:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            client-name: Google
            scope:
              - profile
              - email
            authorization-grant-type: authorization_code
            redirect-uri: ${GDP_BACK_URI:'http://localhost:8080'}${OAUTH2_REDIRECT_URI}/google

          KAKAO:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            client-name: Kakao
            scope:
              - profile_nickname
              - profile_image
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            redirect-uri: ${GDP_BACK_URI:'http://localhost:8080'}${OAUTH2_REDIRECT_URI}/kakao

          NAVER:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            scope:
              - name
              - email
              - profile_image
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: ${GDP_BACK_URI:'http://localhost:8080'}${OAUTH2_REDIRECT_URI}/naver

        provider:
          KAKAO:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

          NAVER:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
  mail:
    host: ${MAIL_HOST}
    port: ${MAIL_PORT}
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          ssl:
            trust: ${MAIL_HOST}
            checkserveridentity: false



# swagger setting
springdoc:
  version: '@project.version@'  # springdoc 라이브러리 버전 설정
  api-docs:
    path: /api-docs # api 문서가 제공될 경로
  default-consumes-media-type: application/json # API에서 사용할 기본 미디어 유형
  default-produces-media-type: application/json # API에서 사용할 기본 미디어 유형
  swagger-ui:
    operations-sorter: alpha  # UI에서 작업을 알파벳 순으로 정렬함
    tags-sorter: alpha  # UI에서 태그를 알파벳 순으로 정렬함
    path: /swagger-ui.html  # swagger ui에 접근하기 위한 기본 경로 (ex. localhost:8080/swagger-ui.html)
    disable-swagger-default-url: true # 기본 Swagger URL을 비활성화하고 명시적인 경로 /swagger-ui.html로만 접근하도록 함
    display-query-params-without-oauth2: true # UI에서 OAuth2 없이 쿼리 매개변수를 표시한다.
    doc-expansion: none
  paths-to-match: # API 문서화에 포함할 경로 패턴을 설정
    - /api/v1/**
    - /sample/**


sample:
  covid:
    url: ${COVID_API_URL}
    api-key: ${COVID_API_KEY}


jwt:
  secret: ${JWT_SECRET}
  token:
    access-expiration-time: ${ACCESS_TOKEN_EXPIRATION_TIME}
    refresh-expiration-time: ${REFRESH_TOKEN_EXPIRATION_TIME}

data:
  redis:
    host: ${REDIS_HOST}
    port: ${REDIS_PORT}